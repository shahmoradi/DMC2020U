<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/DMC2020U/feed.xml" />
<link rel="alternate" type="text/html" href="http:/DMC2020U/" />
<updated>2020-07-02T12:59:41-05:00</updated>
<id>http:/DMC2020U/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/DMC2020U/</uri>
  <email>shahmoradi@utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Quiz 3: Python programming concepts, data IO]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/3-python-programming"/>
  <id>http:/DMC2020U/quiz/3-python-programming</id>
  <published>2020-07-02T00:00:00-05:00</published>
  <updated>2020-07-02T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python programming. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/3/&lt;/strong&gt; folder in your GitHub project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Consider this &lt;a href=&quot;https://www.cdslab.org/quiz/3/testInput.in&quot; target=&quot;_blank&quot;&gt;comma-separated data file&lt;/a&gt;. Write a simple Python code &lt;code&gt;outputter.py&lt;/code&gt; that takes two command line arguments like the following,
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python outputter.py outputter.in outputter.out
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;and then writes the same float data in the output file &lt;code&gt;outputter.out&lt;/code&gt; (whose name and path was taken from the command-line), and writes out data in a formatted style, like this &lt;a href=&quot;https://www.cdslab.org/quiz/3/outputter.out&quot; target=&quot;_blank&quot;&gt;example output file&lt;/a&gt;, with only three digits after decimal point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Suppose you write a Python module, which you would also like to run it as a standalone Python code. If you wanted to make sure that some specific Python statements are executed only when the code is run a Python code (and not a module), you may recall from the lecture, that we had to use and if block like the following,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
&amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Briefly explain what this if block does and mean.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Suppose you are given two lists of numbers,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;even = [0,2,4,6,8]
odd = [1,3,5,7,9]
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Write a &lt;strong&gt;one-line&lt;/strong&gt; Python statement (list comprehension) that gives a list &lt;code&gt;summ&lt;/code&gt; whose elements are the sum of the respective elements in the above two lists &lt;code&gt;odd&lt;/code&gt; and &lt;code&gt;even&lt;/code&gt;, that is,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;summ
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;[1, 5, 9, 13, 17]  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following for-loop,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/3-python-programming&quot;&gt;Quiz 3: Python programming concepts, data IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 02, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 6: Object-Oriented Programming in Python, Data Visualization]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/6-python-programming-oop-datavis"/>
  <id>http:/DMC2020U/lecture/6-python-programming-oop-datavis</id>
  <published>2020-06-30T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture continues the discussion of the Python programming language and introduces the concepts of classes. Data Visualization techniques will be also discussed,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/instantiation/instantiation.html&quot; target=&quot;_blank&quot;&gt;OOP - instantiation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/encapsulation/encapsulation.html&quot; target=&quot;_blank&quot;&gt;OOP - encapsulation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://serialmentor.com/dataviz/&quot; target=&quot;_blank&quot;&gt;Data Visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/6-python-programming-oop-datavis&quot;&gt;Lecture 6: Object-Oriented Programming in Python, Data Visualization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 30, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 4: Object-Oriented Programming, Data Visualization]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/4-class-datavis"/>
  <id>http:/DMC2020U/homework/4-class-datavis</id>
  <published>2020-06-30T00:00:00-05:00</published>
  <updated>2020-06-30T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday July 8, 2020 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to program OOP-style and how to read data from web and visualize it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/oop-integration-simpson/oop-integration-simpson&quot; target=&quot;_blank&quot;&gt;Implementing an integration problem via an integrand object&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/reading-data-from-web/reading-data-from-web&quot; target=&quot;_blank&quot;&gt;Reading data from the World Wide Web&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/4-class-datavis&quot;&gt;Homework 4: Object-Oriented Programming, Data Visualization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 30, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Python programming concepts]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/2-python-programming"/>
  <id>http:/DMC2020U/quiz/2-python-programming</id>
  <published>2020-06-25T00:00:00-05:00</published>
  <updated>2020-06-25T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python programming. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/2/&lt;/strong&gt; folder in your GitHub project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three fundamental components of a Turing-complete language?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;a way for accessing the memory&lt;/li&gt;
      &lt;li&gt;a way for iteration&lt;/li&gt;
      &lt;li&gt;a way for branching&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three common types of errors in computer programs?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;syntax errors&lt;/li&gt;
      &lt;li&gt;runtime errors&lt;/li&gt;
      &lt;li&gt;semantic errors&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Suppose you write a program that has memory leak. What type of programming error you dealing with?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; runtime error&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the biggest integer (in base 10) that you could store in an &lt;code&gt;int32&lt;/code&gt; type?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; 2,147,483,647&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the difference between &lt;code&gt;int16&lt;/code&gt; and the (&lt;em&gt;unsigned&lt;/em&gt;) &lt;code&gt;uint64&lt;/code&gt; types (two major differences is enough)?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1) &lt;code&gt;int16&lt;/code&gt; is only 16 bits storage, whereas &lt;code&gt;uint64&lt;/code&gt; is 64 bits storage.&lt;br /&gt;
2) &lt;code&gt;int16&lt;/code&gt; is a signed integer storage meaning that one bit is reserved for the integer’s sign representation, whereas &lt;code&gt;uint64&lt;/code&gt; can only represent positive integers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following for-loop,&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This for-loop never ends! Because at each iteration, a new element is added to the end of the list. You can check if this is indeed the case by adding a print statement inside the loop,&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
    print(item)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;0
2
4
6
8
1
3
5
7
9
2
4
6
8
10
3
5
7
9
11
4
6
8
10
12
5
7
9
11
13
6
8
10
12
14
7
9
11
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;and the loop keeps printing forever!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that prints your full name 5 times, each on a separate line.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('Data Mining\n'*5)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;Data Mining
Data Mining
Data Mining
Data Mining
Data Mining
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that applies the relevant Python string manipulator methods to this string,&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Python Is Great For String Manipulation.
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;and transforms it to the following string and and prints it on screen,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.noitalupinaMgnirtSroFtaerGsInohtyP
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( &quot;Python Is Great For String Manipulation.&quot;.replace(' ','')[::-1] )
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;.noitalupinaMgnirtSroFtaerGsInohtyP
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Make a string from the following list, with one one-line of Python code.&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = ['The' , 'weather' , 'is' , 'rainy' , 'today' , 'and' , 'cold' , 'only' , '22' , 'F.']
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot; &quot;.join(mylist)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;'The weather is rainy today and cold only 22 F.'
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are tuples mutable objects? Can they be redefined?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
No. Yes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do you define an empty dictionary?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;empty_dict = {} 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/2-python-programming&quot;&gt;Quiz 2: Python programming concepts&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 25, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 5: The structure of the Python programming language: classes, modules, exception handling, and input/output methods]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/5-python-programming-modules-classes-io-Copy"/>
  <id>http:/DMC2020U/lecture/5-python-programming-modules-classes-io - Copy</id>
  <published>2020-06-25T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture continues the discussion of the Python programming language and introduces the concepts of classes, modules, exception handling, and input/output methods in Python. This is last lecture that mainly focused on Python concepts. In the following lectures, our focus will gradually shift from pure-Python to Data Mining with Python. The relevant Python lecture notes are the following,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/program-units/modules/modules.html&quot; target=&quot;_blank&quot;&gt;modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/data-transfer/input/input.html&quot; target=&quot;_blank&quot;&gt;input&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/data-transfer/output/output.html&quot; target=&quot;_blank&quot;&gt;output&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/exceptions-errors/exception-handling/exception-handling.html&quot; target=&quot;_blank&quot;&gt;exception handling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/instantiation/instantiation.html&quot; target=&quot;_blank&quot;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/5-python-programming-modules-classes-io-Copy&quot;&gt;Lecture 5: The structure of the Python programming language: classes, modules, exception handling, and input/output methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 25, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 4: The structure of the Python programming language: functions]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/4-python-programming-function"/>
  <id>http:/DMC2020U/lecture/4-python-programming-function</id>
  <published>2020-06-23T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture continues the discussion of the Python programming language and introduces the concept of functions in Python. The relevant Python lecture notes are the following,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/program-units/functions/functions.html&quot; target=&quot;_blank&quot;&gt;functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/4-python-programming-function&quot;&gt;Lecture 4: The structure of the Python programming language: functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 23, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: Python programming: Branching, functions, exception handling]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/3-python-programming"/>
  <id>http:/DMC2020U/homework/3-python-programming</id>
  <published>2020-06-23T00:00:00-05:00</published>
  <updated>2020-06-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Tuesday June 30, 2020 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to work with the Python programming language constructs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/branching-pythonic-way/branching-pythonic-way&quot; target=&quot;_blank&quot;&gt;Branching, the Pythonic way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/implementing-gaussian-function/implementing-gaussian-function&quot; target=&quot;_blank&quot;&gt;Implementing the Bell-shaped (Gaussian) function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/one-line-check-even-number/one-line-check-even-number&quot; target=&quot;_blank&quot;&gt;Check if number is even in one line function definition&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/largest-prime-number-smaller-than-input/largest-prime-number-smaller-than-input&quot; target=&quot;_blank&quot;&gt;Getting the largest prime number smaller than the input value&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/finding-maximum-value-via-recursive-function/finding-maximum-value-via-recursive-function&quot; target=&quot;_blank&quot;&gt;Finding the maximum value of an array via recursive function calls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/exception-handling-projectile-motion/exception-handling-projectile-motion&quot; target=&quot;_blank&quot;&gt;Exception handling in the case of a simple projectile motion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/command-line-input-arguments-summation/command-line-input-arguments-summation&quot; target=&quot;_blank&quot;&gt;Command line input arguments summation via sum()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/command-line-input-arguments-eval/command-line-input-arguments-eval&quot; target=&quot;_blank&quot;&gt;Command line input arguments summation via eval()&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/3-python-programming&quot;&gt;Homework 3: Python programming: Branching, functions, exception handling&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 23, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Version control system, programming history]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/1-version-control-system-programming-history"/>
  <id>http:/DMC2020U/quiz/1-version-control-system-programming-history</id>
  <published>2020-06-18T00:00:00-05:00</published>
  <updated>2020-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Version Control System and the history of programming. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/1/&lt;/strong&gt; folder in your GitHub project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
 &lt;br /&gt;
 (A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
 (B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
 (C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
 (D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
 (E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
 (F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
 (G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
 (H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
 (I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
 (J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer: A, D, G, F, I&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
 &lt;br /&gt;
 (A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
 (B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
 (C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer: B, C&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write down the Git command that lists all Git commands for you.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; $ git help -a
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;/p&gt;

    &lt;p&gt;(B) Does it need interpretation in order to become machine-comprehensible?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Yes. An &lt;em&gt;Assembler&lt;/em&gt; interprets the program for the machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name the oldest high-level programming language that is still in active daily use.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;/p&gt;

    &lt;p&gt;(B) Approximately how many decades is it old? ($\pm15$ years is acceptable answer. the decade it was created is also an acceptable answer)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
in 1950s&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name a second-generation programming language.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;/p&gt;

    &lt;p&gt;(B) Which language-generation are Fortran, C, C++, MATLAB, Python, R?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
third, third, third, fourth, fourth, fourth&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In what decades C, C++, and MATLAB/Python were created, respectively?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1970s, 1980s, 1980s, 1990s&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name an ancestor programming language of C.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
B&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of C++.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
C, Simula&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of MATLAB and a programming language ancestor of Python.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran/C&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/1-version-control-system-programming-history&quot;&gt;Quiz 1: Version control system, programming history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 18, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 3: The structure of the Python programming language]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/3-python-programming-structure"/>
  <id>http:/DMC2020U/lecture/3-python-programming-structure</id>
  <published>2020-06-18T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture aims at providing an overview of the structure of and the coding practices within the Python programming language.&lt;/p&gt;

&lt;p&gt;Throughout this and the following lecture, we will provide a quick overview of the Python programming language syntax, with an emphasis on the tools and commands needed for Data Mining. We will follow the lecture available &lt;a href=&quot;https://www.cdslab.org/python/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and starting from &lt;a href=&quot;https://www.cdslab.org/python/notes/values-variables-types/first-program/first-program.html&quot; target=&quot;_blank&quot;&gt;variables in Python&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/3-python-programming-structure&quot;&gt;Lecture 3: The structure of the Python programming language&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 18, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 2: The Python programming language]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/2-python-programming-introduction"/>
  <id>http:/DMC2020U/lecture/2-python-programming-introduction</id>
  <published>2020-06-16T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture aims at providing an overview of the history of programming and the Python programming language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/programming-history/programming-history.html&quot; target=&quot;_blank&quot;&gt;Programming history&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/computer-program-structure/computer-program-structure.html&quot; target=&quot;_blank&quot;&gt;Computer program structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/python-for-beginners/python-for-beginners.html&quot; target=&quot;_blank&quot;&gt;Beginning Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/2-python-programming-introduction&quot;&gt;Lecture 2: The Python programming language&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 16, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Python programming]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/2-python-programming"/>
  <id>http:/DMC2020U/homework/2-python-programming</id>
  <published>2020-06-16T00:00:00-05:00</published>
  <updated>2020-06-16T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Tuesday June 23, 2020 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to work with the Python programming language constructs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/integer-overflow/integer-overflow&quot; target=&quot;_blank&quot;&gt;Integer overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/python-variable-aliasing-copying/python-variable-aliasing-copying&quot; target=&quot;_blank&quot;&gt;Variable aliasing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/while-loop-to-for-loop/while-loop-to-for-loop&quot; target=&quot;_blank&quot;&gt;The while-loop implementation of for-loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/precision-error-paradox/precision-error-paradox&quot; target=&quot;_blank&quot;&gt;Impact of machine precision on numerical computation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/roundoff-error-paradox/roundoff-error-paradox&quot; target=&quot;_blank&quot;&gt;Impact of round-off errors on numerical computations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/2-python-programming&quot;&gt;Homework 2: Python programming&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 16, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 1: Version Control Systems, Git, and GitHub]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/1-vcs"/>
  <id>http:/DMC2020U/lecture/1-vcs</id>
  <published>2020-06-08T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture aims at providing an overview of the Version Control Systems (VCS) and how to use them for our needs in this course.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;version-control-systems-git-and-github&quot;&gt;Version Control Systems, Git, and GitHub&lt;/h3&gt;

&lt;p&gt;To lean about VCS, Git, and GitHub, we will follow the lecture notes available here,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/version-control-system/version-control-system.html&quot; target=&quot;_blank&quot;&gt;VCS (Python)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/matlab/notes/preliminary-foundations/version-control-system/version-control-system.html&quot; target=&quot;_blank&quot;&gt;VCS (MATLAB)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/1-vcs&quot;&gt;Lecture 1: Version Control Systems, Git, and GitHub&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 08, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/1-version-control-using-git-github"/>
  <id>http:/DMC2020U/homework/1-version-control-using-git-github</id>
  <published>2020-06-08T00:00:00-05:00</published>
  <updated>2020-06-08T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Tuesday June 16, 2020 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/version-control-using-git-github/version-control-using-git-github&quot; target=&quot;_blank&quot;&gt;Version-control using Git and GitHub&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/1-version-control-using-git-github&quot;&gt;Homework 1: Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 08, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 0: Student-professor connection day]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/announcement/0-student-professor-connection-day"/>
  <id>http:/DMC2020U/announcement/0-student-professor-connection-day</id>
  <published>2020-06-08T00:00:00-05:00</published>
  <updated>2020-06-08T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;On the first day of our class, we will try to get to know each other and I will attempt to describe my research work and educational background for you, as well as what we should expect from this course. Then I will present the results of the survey that I sent out to you a week ago to assess your programming knowledge, your favorite programming language, and the programming language that you would need for your research. Based on the survey results and your feedback in class, we will decide on the choice of language and the design of this course.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;about-me-amir-the-instructor&quot;&gt;About me, Amir, the instructor&lt;/h2&gt;

&lt;p&gt;I am a physicist and researcher, and currently a faculty member at &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/physics/&quot;&gt;the Department of Physics&lt;/a&gt; as well as the Data Science Program in &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/science/index.php&quot;&gt;The College of Science&lt;/a&gt; at &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/&quot;&gt;The University of Texas at Arlington&lt;/a&gt;. You can find more information about me, our group, and our research at &lt;a target=&quot;_blank&quot; href=&quot;https://www.cdslab.org&quot;&gt;cdslab.org&lt;/a&gt;. Here is a summary of my life in a few pictures:&lt;/p&gt;

&lt;p&gt;I was introduced to the world of information and computer programming around 1991 by my father and elder brother. By the end of elementary school, I was so impressed with and knew enough about computer software to write a few simple &lt;a target=&quot;_blank&quot; href=&quot; https://en.wikipedia.org/wiki/PC_game&quot;&gt;computer games&lt;/a&gt; in &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/QBasic&quot;&gt;QBasic programming language&lt;/a&gt; on our first family personal computer, &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/IBM_386SLC&quot;&gt;IBM 386&lt;/a&gt;. Here is an example of how computer games looked liked 30 years ago.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4TSF5sIgorA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
		&lt;!-- &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; --&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/memoriesOfGreen.jpg&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/memoriesOfGreen.jpg&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
            &lt;figcaption&gt;A portrait of me at high-school by my friends&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/EinsteinSandals.jpg&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/EinsteinSandals.jpg&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
            &lt;figcaption&gt;What I imagined I'd do as a physicist&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/PhDdefense.gif&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/PhDdefense.gif&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
            &lt;figcaption&gt;A scene from my Ph.D. defense&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I never imagined a day I would use computer programming for scientific purposes. Nevertheless, there has been almost no single day that I have not used scientific programming for my work and research, ever since I entered graduate school.&lt;/p&gt;

&lt;h2 id=&quot;my-research-topics&quot;&gt;My research topics&lt;/h2&gt;

&lt;p&gt;The following are a few examples of what I do nowadays as part of my scientific research at UT Austin.&lt;/p&gt;

&lt;h3 id=&quot;theoretical-astrophysics&quot;&gt;Theoretical Astrophysics&lt;/h3&gt;

&lt;p&gt;While my current focus of research is mathematical modelling of tumor growth and Monte Carlo samplers, I am and have been working in multiple branches of science and engineering for several years, from the subatomic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Elementary_particle&quot;&gt;elementary particles&lt;/a&gt;, to the microscopic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Macromolecule&quot;&gt;biological macromolecules&lt;/a&gt;, to &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot;&gt;astrophysical phenomena&lt;/a&gt; occurring on the grandest scales of the &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Observable_universe&quot;&gt;observable Universe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For several years of my research, I have been working on understanding Gamma-Ray Bursts (GRB) and their physics. Below is a movie of the moment a Short-duration GRB is generated from the merger of a binary Neutron star system.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/astro_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;theoretical-biology-bioinformatics&quot;&gt;Theoretical Biology, Bioinformatics&lt;/h3&gt;

&lt;p&gt;I have also worked for a few years in the field of bioinformatics and evolutionary biology. The overarching goal in the field of protein bioinformatics and biophysics is to understand how proteins fold into their unique structure, and what determines the stability of the protein &lt;abbr title=&quot;3-Dimensional&quot;&gt;3D&lt;/abbr&gt; structure.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/bio_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/bio_2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the workhorses of this field, is therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Molecular_dynamics&quot; target=&quot;_blank&quot;&gt;molecular dynamic simulation&lt;/a&gt; to probe the dynamics of proteins and their interactions with other molecules. The following is a 1.5ns molecular dynamics simulation of Human Influenza H1 Hemagglutinin protein (&lt;a href=&quot;https://www.rcsb.org/pdb/explore.do?structureId=1rd8&quot; target=&quot;_blank&quot;&gt;1RD8&lt;/a&gt;, chains AB).&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;petroleum-engineering&quot;&gt;Petroleum Engineering&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/petro_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;computational-oncology&quot;&gt;Computational Oncology&lt;/h3&gt;

&lt;p&gt;What you see in the figures below, is a representation of the growth of Glioblastoma tumor cells in a Rat’s brain over time.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/onco_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/onco_2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/onco_3.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-temporal-evolution-of-the-growth-of-glioma-tumor-in-rat&quot;&gt;The temporal evolution of the growth of Glioma tumor in rat&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_1_t10.0.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/GBGlastLong.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_2_t12.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_3_t14.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_5_t16.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_6_t18.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_7_t20.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

--&gt;

&lt;h3 id=&quot;monte-carlo-simulation-and-integration-methods&quot;&gt;Monte Carlo Simulation and Integration Methods&lt;/h3&gt;

&lt;p&gt;One of the fields on which my research is currently focused, is developing Monte Carlo optimizer/sampler and integrator algorithms for Bayesian inverse problems.&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-sampling-algorithms&quot;&gt;Development of Monte Carlo sampling algorithms&lt;/h4&gt;

&lt;p&gt;Below you see example animations of two &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&quot; target=&quot;_blank&quot;&gt;Markov Chain Monte Carlo&lt;/a&gt; (MCMC) samplers, both of which sample a double Gaussian-peak function, but with different MCMC sampling parameters.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/PDF_RS_H_Forever20ms.gif&quot; width=&quot;100%&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of highly-efficiency, but bad-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/PDF_RS_L_Forever20ms.gif&quot; width=&quot;100%&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of low-efficiency, but good-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-integration-algorithms&quot;&gt;Development of Monte Carlo integration algorithms&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/DRI.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/DLI.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/GR3D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/GR2D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/GR2D.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/EB3D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/EB2D.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;biomedical-data-science&quot;&gt;Biomedical Data Science&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/PT509_ST9501_SE00144_ADC0016.png&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/PT509_ST9501_SE00144_ADC0016.png&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/PT509_ST9501_SE00144_ADC0016_overlay.png&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/PT509_ST9501_SE00144_ADC0016_overlay.png&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/announcement/0-student-professor-connection-day&quot;&gt;Announcement 0: Student-professor connection day&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 08, 2020.&lt;/p&gt;</content>
</entry>

</feed>
