<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/DMC2020U/feed.xml" />
<link rel="alternate" type="text/html" href="http:/DMC2020U/" />
<updated>2020-08-09T04:33:05-05:00</updated>
<id>http:/DMC2020U/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/DMC2020U/</uri>
  <email>shahmoradi@utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Homework 8: Markov Chain Monte Carlo, Uncertainty Quantification, and Classification]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/8-mcmc-clustering"/>
  <id>http:/DMC2020U/homework/8-mcmc-clustering</id>
  <published>2020-08-06T00:00:00-05:00</published>
  <updated>2020-08-06T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Tuesday Aug 18, 2020 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to perform an optimization, in particular, within the context of regression.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Part (b) of this problem: &lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-predicting-future-global-land-temperature-maxlikelihood/regression-predicting-future-global-land-temperature-maxlikelihood&quot; target=&quot;_blank&quot;&gt;Regression: Predicting the global land temperature of the Earth in 2050 from the past data via the maximum likelihood approach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/clustering-kmeans/clustering-kmeans&quot; target=&quot;_blank&quot;&gt;Kmeans clustering&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/8-mcmc-clustering&quot;&gt;Homework 8: Markov Chain Monte Carlo, Uncertainty Quantification, and Classification&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on August 06, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Final exam: semester project]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/exam/1-semester-project"/>
  <id>http:/DMC2020U/exam/1-semester-project</id>
  <published>2020-08-01T00:00:00-05:00</published>
  <updated>2020-08-01T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is page describes the final semester project that will serve as the final exam for this course. Please submit all your efforts for this project (all files, data, and results) in &lt;code&gt;DMC2020U/exams/final/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by &lt;strong&gt;10:30 AM, Tuesday, Aug 18, 2020&lt;/strong&gt;.  &lt;strong&gt;Note: I strongly urge you to attend the future lectures until the end of the semester and seek help from the instructor (Amir) to tackle this project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inside the directory for the project (&lt;code&gt;DMC2020U/exams/final/&lt;/code&gt;) create three other folders: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; folder contains the &lt;a href=&quot;http:/DMC2020U/exam/1-problem/cells.mat&quot; target=&quot;_blank&quot;&gt;input data&lt;/a&gt; for this project. The &lt;code&gt;src&lt;/code&gt; folder should contain all the codes that you write for this project, and the &lt;code&gt;results&lt;/code&gt; folder should contain all the results generated by your code.&lt;/p&gt;

&lt;p&gt;For your final project, you can pick one of the following two projects:&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;nonlinear-regression&quot;&gt;Nonlinear Regression&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data-reduction-and-visualization&quot;&gt;Data reduction and visualization&lt;/h3&gt;

&lt;p&gt;Our goal in this project is to fit a mathematical model of the growth of living cells to real experimental data for the growth of a cancer tumor in the brain of a rat. You can download the data in the form of a MATLAB data file for this project from &lt;a href=&quot;http:/DMC2020U/exam/1-problem/cells.mat&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Write a set of separate Python codes that perform the following tasks one after the other, and output all the results to the &lt;code&gt;results&lt;/code&gt; folder described above. Since you have multiple Python codes each in a separate file for different purposes, you should also write a &lt;code&gt;main&lt;/code&gt; Python code, such that when the user of your codes runs on the Bash command line,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then all the necessary Python codes to generate all the results will be called by this &lt;code&gt;main&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;Initially at time $t=0 ~\mathrm{[days]}$, $100,000\pm10,000$ brain tumor cells are injected to the brain of the rat. These cells are then allowed to grow for 10 days. Then starting at day 10, the brain of the rat is imaged using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnetic_resonance_imaging&quot; target=&quot;_blank&quot;&gt;MRI machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each image results in a 4-dimensional double-precision MATLAB matrix &lt;code&gt;cells(:,:,:,:)&lt;/code&gt;, corresponding to dimensions &lt;code&gt;cells(y,x,z,time)&lt;/code&gt;. This data is collected from MRI imaging of the rat’s brain almost every other day for two weeks. For example, &lt;code&gt;cells(:,:,:,1)&lt;/code&gt; contains the number of cells at each point in space (y,x,z) at the first time point, or, &lt;code&gt;cells(:,:,10,1)&lt;/code&gt; represents a (XY) slice of MRI at $z=1$ and $t=1 [days]$.&lt;/p&gt;

&lt;p&gt;Therefore, the vector of times at which we have the number of tumor cells measured would be,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Time = [ 0, 10, 12, 14, 16, 18, 20, 22 ] ~,&lt;/script&gt;

&lt;p&gt;in units of days. Given this data set,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; First write a Python script that reads the input MATLAB binary file containing cell numbers at different positions in the rat’s brain measured by MRI, on different days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write Python codes that generate a set of figures as similar as possible to the following figures (specific color-codes of the curves and figures do not matter, focus more on the format of the plots and its parts).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;obtaining-the-error-in-tumor-cell-count&quot;&gt;Obtaining the error in tumor cell count&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Our assumption here is that the uncertainty in the total number of tumor cells at each time point is given by the number of tumor cells at the boundary of the tumor. Therefore,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(This part is optional extra credit.)&lt;/strong&gt; you will have to write a Python code that identifies the boundary of the tumor at each time point and then sums over the count cells in all boundary points and uses that as the error in the number of tumor cell counts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you did not solve the above optional part, then assume that the uncertainty in the count of tumor cells at any given point in time is just $5\%$ of the total count of tumor cells. For the illustration of the error bars, you will need Python functions such as &lt;code&gt;pyplot.errorbar()&lt;/code&gt; of &lt;code&gt;matplotlib&lt;/code&gt; module. In the end, you should get and save a figure in your project’s figure folder like the following figure,&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/1-problem/figures/growthCurve.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that this part of the project is completely independent of the modeling part described in the following section.&lt;/p&gt;

&lt;h3 id=&quot;the-mathematical-model-of-tumor-growth&quot;&gt;The mathematical model of tumor growth&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Now our goal is to fit the time evolution of the growth of this tumor, using a mathematical model. To do so, we need to find the best-fit parameters of the model. The mathematical model we will use here is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gompertz_function&quot; target=&quot;_blank&quot;&gt;Gompertzian growth model&lt;/a&gt;. Here, we will use a slightly modified form of the Gompertzian function of the following form,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N(t,\lambda,c) = N_0 \times \exp\bigg( \lambda~\bigg[ 1-\exp(-ct) \bigg] \bigg) ~,&lt;/script&gt;

&lt;p&gt;where $N(t,\lambda,c)$ is the &lt;strong&gt;predicted number&lt;/strong&gt; of tumor cells at time $t$, $N_0$ is the initial number of tumor cells at time $t=0$ days, $\lambda$ is the growth rate parameter of the model, and $c$ is just another parameter of the model. We already know the initial value of the number of tumor cells, $N_0=100,000\pm10,000$. Therefore, we can fix $N_0$ to $100,000$ in the equation of the model given above.&lt;/p&gt;

&lt;p&gt;However, we don’t know the values of the parameters $\lambda$ and $c$. Thus, we would like to find their best values given the input tumor cell data using some Python optimization algorithm.&lt;/p&gt;

&lt;p&gt;This Gompertzian growth model is called our &lt;strong&gt;physical model&lt;/strong&gt; for this problem, because it describes the physics of our problem (The physics/biology of the tumor growth).&lt;/p&gt;

&lt;h4 id=&quot;combining-the-physical-model-with-a-regression-model&quot;&gt;Combining the physical model with a regression model&lt;/h4&gt;

&lt;p&gt;Now, if our physical model was ideally perfect in describing the data, the curve of the model prediction would pass through all the points in the growth curve plot of the above figure, thus providing a perfect description of data. This is, however, never the case, as it is famously said &lt;strong&gt;all models are wrong, but some are useful&lt;/strong&gt;. In other words, the model prediction never matches observation perfectly.&lt;/p&gt;

&lt;p&gt;Therefore, we have to seek for the parameter values that can bring the model prediction us as close as possible to data. To do so, we define a &lt;strong&gt;statistical model&lt;/strong&gt; in addition to the &lt;strong&gt;physical model&lt;/strong&gt; described above. In other words, we have to define a statistical regression model (the renowned &lt;strong&gt;least-squares method&lt;/strong&gt;) that gives us the probability $\pi(\log N_{obs}|\log N(t))$ of observing individual data points at each of the given times,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi(\log N_{obs} | \log N(t,\lambda,c),\sigma) = \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t)-\log N(t,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;Note that our statistical model given above is a Normal probability density function, with its mean parameter represented by &lt;strong&gt;the log&lt;/strong&gt; of the output of our physical model, $\log N(t,\lambda,c)$, and its standard deviation represented by $\sigma$, which is unknown, and we seek to find it. The symbol $\pi$, whenever it appears with parentheses, like $\pi()$, it means the probability of the entity inside the parentheses. However, whenever it appears alone, it means the famous number PI, $\pi\approx 3.1415$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we use the logarithm of the number of cells instead of using the number of cells directly?&lt;/strong&gt; The reason behind it is slightly complicated. A simple (but not entirely correct argument) is the following: We do so, because the tumor cell counts at later times become extremely large numbers, on the order of several million cells (For example, look at the number of cells in the late stages of the tumor growth, around $t=20$ days). Therefore, to make sure that we don’t hit any numerical precision limits of the computer when dealing with such huge numbers, we work with the logarithm of the number of tumor cells instead of their true non-logarithmic values.&lt;/p&gt;

&lt;p&gt;We have seven data points, so the overall probability of observing all of data $\mathcal{D}$ together (the time vector and the logarithm of the number of cells at different times) given the parameters of the model, $\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$, is the product of their individual probabilities of observations given by the above equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\mathcal{L}(\mathcal{D}|\lambda,c,\sigma) 
&amp;= \prod_{i=1}^{n=8} \pi(\log N_{obs}(t_i) | \log N(t_i,\lambda,c),\sigma) \\\\
&amp;= \prod_{i=1}^{n=8} \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i)-\log N(t_i,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Frequently, however, you would want to work with $\log\mathcal{L}$ instead of $\mathcal{L}$. This is again because the numbers involved are extremely small often below the precision limits of the computer. So, by taking the logarithm of the numbers, we work instead with the number’s exponent, which looks just like a normal number (not so big, not so small). So, by taking the log, the above equation becomes,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    \log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)
    &amp;= \sum_{i=1}^{n=8} \log \pi( \log N_{obs}(t_i) | \log N(t_i,\lambda,c),\sigma) \\\\
    &amp;= \sum_{i=1}^{n=8} \log \bigg[ \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i) - \log N(t_i,\lambda,c) \big]^2}{2\sigma^2} \bigg) \bigg] ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;
Now the goal is to use an optimization algorithm in Python, such as &lt;code&gt;fmin()&lt;/code&gt; of &lt;code&gt;scipy&lt;/code&gt; package, to find the most likely set of the parameters of the model $\lambda,c,\sigma$ that give the highest likelihood of obtaining the available data, which is given by the number $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$ from the above equation. So we want to find the set of parameters for which this number given by the above equation is maximized. You can also use any Python optimization function or method that you wish, to obtain the best parameters.&lt;/p&gt;

&lt;p&gt;However, if you use &lt;code&gt;fmin()&lt;/code&gt; of &lt;code&gt;scipy&lt;/code&gt; package, then note that this function finds the minimum of an input function, not the maximum. What we want is to find the maximum of $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$.
What is the solution then? Very simple.
We can multiply the value of $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$ by a negative sign so that the maximum value is converted to a minimum. But, note that the position (the set of parameter values) at which this minimum occurs, will remain the same as the maximum position for $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$.&lt;/p&gt;

&lt;p&gt;So, now rewrite your likelihood function above by multiplying its final result (which is just number) by a negative sign. Then you pass this modified function to &lt;code&gt;fmin()&lt;/code&gt; of &lt;code&gt;scipy&lt;/code&gt; package and you find the optimal parameters. Note that &lt;code&gt;fmin()&lt;/code&gt; of &lt;code&gt;scipy&lt;/code&gt; package takes as input also a set of initial staring parameter values to initiate the search for the optimal parameters. You can use $(\lambda,c,\sigma) = [10,0.1,1]$ as your starting point given to &lt;code&gt;fmin()&lt;/code&gt; of &lt;code&gt;scipy&lt;/code&gt; package to search for the optimal values of the parameters.&lt;/p&gt;

&lt;p&gt;Then redraw the above tumor evolution curve and show the result from the model prediction as well, like the following,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/1-problem/figures/growthCurveFit.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Report also your best-fit parameters in a file and submit them with all the figures and your codes to your exam folder repository.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hierarchical-clustering&quot;&gt;Hierarchical Clustering&lt;/h2&gt;

&lt;p&gt;Consider the set of (x,y) coordinates of 1000 points in this file: &lt;a href=&quot;http:/DMC2020U/exam/2-problem/points.txt&quot; target=&quot;_blank&quot;&gt;points.txt&lt;/a&gt;. Plotting these points would yield a scatter plot like the black points in the following plot,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/2-problem/scatterPlot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The red points on this plot delineate the borders of the three ellipsoids from which these points have been drawn. Suppose, we did not have any a priori knowledge of these ellipsoids and we wanted to &lt;strong&gt;guess them&lt;/strong&gt; to the best of our knowledge using Machine Learning methods, in particular, clustering techniques.&lt;/p&gt;

&lt;p&gt;The problem here, however, is slightly complex than the above supposition: We may not even know, a priori, how many clusters exist in our data set. Many clustering techniques have been developed over the past decades to automatically answer the question of how many clusters exist in a dataset and where and which objects belong to what clusters.&lt;/p&gt;

&lt;p&gt;Here, we want to focus on a very special approach. To predict the original ellipsoids from which these points are drawn, we can start with a very simple assumption: suppose all points came from one single ellipsoid. We can build this hypothetical ellipsoid by constructing the covariance matrix of the set of points in the dataset and then scale it properly such that the ellipsoid covers all the points in our dataset. Here is a procedure to this in Python,&lt;/p&gt;

&lt;p&gt;First, we read the data set and visualize it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%matplotlib notebook
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# read data
Data = pd.read_csv(&quot;points.txt&quot;)
Point = np.array([Data.x,Data.y])

fig = plt.figure( figsize=(4.5, 4) \
                , dpi= 100 \
                , facecolor='w' \
                , edgecolor='w' \
                ) # create figure object
ax = fig.add_subplot(1,1,1) # Get the axes instance

ax.plot( Point[0,:] \
       , Point[1,:] \
       , 'r.' \
       , markersize = 1 \
       ) # plot with color red, as line

ax.set_xlabel('X')
ax.set_ylabel('Y')
fig.savefig('points.png', dpi=200) # save the figure to an external file
plt.show() # display the figure
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will display the following figure,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/2-problem/points.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, here is a script that computes the covariance matrix of a given sample of points (here, our dataset),&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def getMinVolPartition(Point):
    import numpy as np
    npoint = len(Point[0,:])
    ndim = len(Point[:,0])
    ncMax = npoint // (ndim + 1) # max number of clusters possible
    BoundingEllipsoidCenter = np.array([np.mean(Point[0,:]),np.mean(Point[1,:])])
    SampleCovMat = np.mat(np.cov(Point))
    SampleInvCovMat = np.mat(np.linalg.inv(SampleCovMat))
    PointNormed = np.mat(np.zeros((ndim,npoint)))
    for idim in range(ndim):
        PointNormed[idim,:] = Point[idim] - BoundingEllipsoidCenter[idim]
    MahalSq = PointNormed.T * SampleInvCovMat * PointNormed
    maxMahalSq = np.max(MahalSq)
    BoundingEllipsoidVolume = np.linalg.det(SampleCovMat) * maxMahalSq**ndim
    BoundingEllipsoidCovMat = SampleCovMat * maxMahalSq
    print(
    &quot;&quot;&quot;
    nd = {}
    np = {}
    ncMax = {}
    SampleCovMat = {}
    InvCovMat = {}
    max(MahalSq) = {}
    BoundingEllipsoidCenter = {}
    BoundingEllipsoidCovMat = {}
    BoundingEllipsoidVolume = {}
    &quot;&quot;&quot;.format( ndim
              , npoint
              , ncMax
              , SampleCovMat[:]
              , SampleInvCovMat
              , maxMahalSq
              , BoundingEllipsoidCenter
              , BoundingEllipsoidCovMat
              , BoundingEllipsoidVolume
              ))
    return BoundingEllipsoidCenter, BoundingEllipsoidCovMat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling this function would give an output like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;getMinVolPartition(Point)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    nd = 2
    np = 1000
    ncMax = 333
    SampleCovMat = [[1.0761723  0.36394188]
 [0.36394188 0.71635847]]
    InvCovMat = [[ 1.12198982 -0.5700206 ]
 [-0.5700206   1.68554491]]
    max(MahalSq) = 14.185346024371276
    BoundingEllipsoidCenter = [6.44826263 6.14296536]
    BoundingEllipsoidCovMat = [[15.26587652  5.16264153]
 [ 5.16264153 10.16179275]]
    BoundingEllipsoidVolume = 128.47580579408614

(array([6.44826263, 6.14296536]), matrix([[15.26587652,  5.16264153],
         [ 5.16264153, 10.16179275]]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where, the variable &lt;code&gt;BoundingEllipsoidCenter&lt;/code&gt; is a vector of lebght two, representing the center of the bounding ellipsoid of these points, the variable &lt;code&gt;BoundingEllipsoidCovMat&lt;/code&gt; represents the 2-by-2 covariance matrix of this bounding ellipsoid, and the variable &lt;code&gt;BoundingEllipsoidVolume&lt;/code&gt; is the determinant of this bounding ellipsoid, essentially representing the volume encosed by it.&lt;/p&gt;

&lt;p&gt;To visualize this bounding ellipsoid, we can use the following code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def getRandMVU(numRandMVU,MeanVec,CovMat,isInside=True):
    &quot;&quot;&quot;
    generates numRandMVU uniformly-distributed random points from 
    inside an ndim-dimensional ellipsoid with Covariance Matrix CovMat, 
    centered at MeanVec[0:ndim].
    Output:
        Numpy matrix of shape numRandMVU by ndim
    &quot;&quot;&quot;
    import numpy as np
    ndim = len(MeanVec)
    AvgStdMVN = np.zeros(ndim)
    CovStdMVN = np.eye(ndim)
    RandStdMVN = np.random.multivariate_normal(AvgStdMVN,CovStdMVN,numRandMVU)
    DistanceSq = np.sum(RandStdMVN**2, axis=1)
    #print(len(DistanceSq))
    if isInside:
        UnifRnd = np.random.random((numRandMVU,))
        UnifRnd = (UnifRnd**(1./ndim)) / np.sqrt(DistanceSq)

    CholeskyLower = np.linalg.cholesky(np.mat(CovMat))
    #print(CholeskyLower[1,0])
    RandMVU = np.zeros(np.shape(RandStdMVN))
    for iRandMVU in range(numRandMVU):
        if isInside:
            RandStdMVN[iRandMVU] *= UnifRnd[iRandMVU]
        else:
            RandStdMVN[iRandMVU] /= np.sqrt(DistanceSq[iRandMVU])
        for i in range(ndim):
            RandMVU[iRandMVU,i] = RandMVU[iRandMVU,i] + CholeskyLower[i,i] * RandStdMVN[iRandMVU,i]
            for j in range(i+1,ndim):
                RandMVU[iRandMVU,j] = RandMVU[iRandMVU,j] + CholeskyLower[j,i] * RandStdMVN[iRandMVU,i]
        RandMVU[iRandMVU] += MeanVec
    return RandMVU
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code takes an input covariance matrix &lt;code&gt;CovMat&lt;/code&gt; corresponding to an ellipsoid of interest centered at &lt;code&gt;MeanVec&lt;/code&gt;, then outputs a set of &lt;code&gt;numRandMVU&lt;/code&gt; points that lie on the boundary of this ellipsoid. If the optional argument &lt;code&gt;isInside&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;, then the output random points will be uniformly distributed inside the ellipsoid.&lt;/p&gt;

&lt;p&gt;Here is an illustration of the bounding ellipsoid of the points we are interested to classify in this problem,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;MeanVec, CovMat = getMinVolPartition(Point)
RandMVU = getRandMVU( numRandMVU=10000
                    , MeanVec=MeanVec
                    , CovMat=CovMat
                    , isInside = False
                    )
%matplotlib notebook
import matplotlib.pyplot as plt

fig = plt.figure( figsize=(4.5, 4) \
                , dpi= 100 \
                , facecolor='w' \
                , edgecolor='w' \
                ) # create figure object

# plot the points
plt.plot( Point[0,:] \
        , Point[1,:] \
        , 'r.' \
        , markersize = 2 \
        )

# plot the center point
plt.plot( MeanVec[0] \
        , MeanVec[1] \
        , 'b.' \
        , markersize = 10 \
        )

# plot the bounding ellipsoid
plt.scatter(RandMVU[:,0],RandMVU[:,1],1)

ax.set_xlabel('X')
ax.set_ylabel('Y')
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/2-problem/boundingEllipsoid.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So far, we have been able to find an ellipsoid that encloses all of the points in our problem. But here is the second question: Does this single ellipsoid accurately describe the original ellipsoid(s) from which the points were drawn? and does it really represent the least-volume bounding ellipsoid for all of these points?&lt;/p&gt;

&lt;p&gt;One way to ensure that this ellipsoid is indeed the least-volume ellipsoid is to check and see if the points are uniformly distributed inside our single ellipsoid. But this turns out to be a very challenging task.&lt;/p&gt;

&lt;p&gt;An easier way to see if the single ellipsoid is a good fit to our points is to compute the area of the single ellipsoid, then move on to assume that our data came from &lt;strong&gt;two ellipsoids&lt;/strong&gt; instead of a single ellipsoid. At this point, we can use the K-means clustering method to find the two clusters from which these points could have been drawn.&lt;/p&gt;

&lt;p&gt;Now, here is the critical step: We compute the sum of the areas enclosed by these two ellipsoids (which could overlap, but that is fine, &lt;strong&gt;we proceed as if they were not overlapping&lt;/strong&gt;). Then we can compare this sum with the area of the original single ellipsoid in the above figure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the area of the single ellipsoid is smaller than the sum of the areas of the two child-ellipsoids, we assume that all of the points in our dataset came from the single ellipsoid, and stop further searches for potentially more clusters in our dataset.&lt;/li&gt;
  &lt;li&gt;However, if the area of the single ellipsoid is larger than the sum of the areas of the two child-ellipsoids, then we know that the two smaller ellipsoids are likely better fit to our dataset than a single ellipsoid. Therefore, our dataset was likely generated from two-ellipsoids.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But what if there are more than two ellipsoids responsible for the generation of the points? One way to test this hypothesis is to repeat the above procedure for the two child-ellipsoids and see whether any one of them can be replaced with two sub-child-ellipsoids instead. This procedure can be then repeated for as many times as needed, until the algorithm stops, implying that all of the child-ellipsoids have been found, &lt;strong&gt;or&lt;/strong&gt;, the number of points for a sub-clustering task becomes 3 or less than 3, in which case no more clustering is possible, because we need at least three points to form a 2D ellipsoid.&lt;/p&gt;

&lt;p&gt;Write an algorithm based on the above description and provided scripts that can classify all of the points in a given dataset into an automatically-determined number of ellipsoids, such that each point in the dataset is enclosed by at least one ellipsoid. The first graph above shows an example of a set of such ellipsoids illustrated by the green dots.&lt;/p&gt;

&lt;p&gt;Note that the ellipsoids found by your algorithm are not unique, meaning that different runs of the algorithm could potentially yield different sets of best-fit ellipsoids. However, we can hope that each set of such ellipsoids found by the algorithm is a good approximation to the original ellipsoids from which the points were drawn.&lt;/p&gt;

&lt;p&gt;Here is an animation of this algorithm at work, for a set of points with an evolving overall-shape over time,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/2-problem/ellipsoids_forever.gif&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;regression-with-cencored-data&quot;&gt;Regression with Cencored Data&lt;/h2&gt;

&lt;p&gt;Supposed we have observed a dataset comprised of $4975$ events with two attributes &lt;code&gt;variable1&lt;/code&gt; and &lt;code&gt;variable2&lt;/code&gt; points in this file: &lt;a href=&quot;http:/DMC2020U/exam/3-problem/data.csv&quot; target=&quot;_blank&quot;&gt;data.csv&lt;/a&gt;. Plotting these points would yield a scatter plot like the red points in the following plot,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/3-problem/data.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The pale black point represent the missing points from our observational dataset. These are points that we could observe (or detect) because of some instrumental bias and sample incompleteness as represented by the black line.&lt;/p&gt;

&lt;p&gt;Now our goal is to form a hypothesis about this dataset, that is, a hypothesis about the joint distribution of the events in the above plot and the correlation between the two variables. To make a correct assessment, we will have to also carefully consider the effects of the detection threshold (the black line) in our inference.&lt;/p&gt;

&lt;p&gt;To help you get started, we can first take the logarithm of this dataset to better understand the joint distribution of the two attributes of the dataset and plot the transformed data,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/exam/3-problem/logdata.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Just by looking at the observed (red) data points, we can form a relatively good hypothesis about the joint distribution of the data: If the detection threshold did not exist, the complete dataset (including the black points) would have likely very well resembled a bivariate lognormal distribution (or a bivariate normal distribution on the logarithmic axes).&lt;/p&gt;

&lt;p&gt;However, this dataset is affected by the detection threshold and we need to also take a model of the detection threshold into account. The logarithmic transformation makes it crystal-clear to us that the detection threshold is likely best modeled by a power-law (or simply a line in the log-space as depicted in the above figure).&lt;/p&gt;

&lt;p&gt;Use the ParaMonte library from the language of your choice (e.g., Python/MATLAB) to perform a Markov Chain Monte Carlo simulation for this regression problem and find the true amount of correlation between the two attributes of this dataset, that is, after taking into account the effects of the detector threshold.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this problem, you will need to attend the following class lectures to get more help on the steps required to take for modeling this dataset.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/exam/1-semester-project&quot;&gt;Final exam: semester project&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on August 01, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 6: Regression]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/6-regression"/>
  <id>http:/DMC2020U/quiz/6-regression</id>
  <published>2020-07-23T00:00:00-05:00</published>
  <updated>2020-07-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of regression concepts.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Consider again this problem of regression on &lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-simple-least-squares-method/regression-simple-least-squares-method&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;. We have seen how the mean of this distribution could be obtained via the Least-Sum-of-Squares (LSS) approach. Now obtain the mean of this distribution via the method of Least-Absolute-Deviations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/visualization-coloring/visualization-coloring&quot; target=&quot;_blank&quot;&gt;Best visualization coloring&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/6-regression&quot;&gt;Quiz 6: Regression&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 23, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 7: Regression and the Maximum Likelihood method]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/7-regression-max-likelihood"/>
  <id>http:/DMC2020U/homework/7-regression-max-likelihood</id>
  <published>2020-07-23T00:00:00-05:00</published>
  <updated>2020-07-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Thursday Aug 6, 2020 10:15 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to perform an optimization, in particular, within the context of regression.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-predicting-future-global-land-temperature-exp/regression-predicting-future-global-land-temperature-exp&quot; target=&quot;_blank&quot;&gt;Regression: Predicting the global land temperature of the Earth in 2050 from the past data: linear vs. exponential temperature increase&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-standard-normal-distribution/regression-standard-normal-distribution&quot; target=&quot;_blank&quot;&gt;Regression: obtaining the most likely mean and standard deviation of a set of Standard Normally Distributed Random Variables&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/monte-carlo-sampling-of-bimodal-gaussian/monte-carlo-sampling-of-bimodal-gaussian&quot; target=&quot;_blank&quot;&gt;Monte Carlo sampling of the sum of two Gaussian distributions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-predicting-future-global-land-temperature-maxlikelihood/regression-predicting-future-global-land-temperature-maxlikelihood&quot; target=&quot;_blank&quot;&gt;Regression: Predicting the global land temperature of the Earth in 2050 from the past data via the maximum likelihood approach&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/7-regression-max-likelihood&quot;&gt;Homework 7: Regression and the Maximum Likelihood method&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 23, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 5: visualization, IO]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/5-visualization-io"/>
  <id>http:/DMC2020U/quiz/5-visualization-io</id>
  <published>2020-07-16T00:00:00-05:00</published>
  <updated>2020-07-16T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of visualization and IO techniques and concepts.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generate the first plot on &lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-predicting-future-global-land-temperature/regression-predicting-future-global-land-temperature&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/5-visualization-io&quot;&gt;Quiz 5: visualization, IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 16, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 6: Regression as an optimization problem]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/6-regression"/>
  <id>http:/DMC2020U/homework/6-regression</id>
  <published>2020-07-14T00:00:00-05:00</published>
  <updated>2020-07-14T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Friday July 24, 2020 10:15 PM&lt;/strong&gt;. This homework aims at giving you some experience on how to perform an optimization, in particular, within the context of regression.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-simple-least-squares-method/regression-simple-least-squares-method&quot; target=&quot;_blank&quot;&gt;Regression: obtaining the most likely mean of a set of Standard Normally Distributed Random Variables&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-predicting-future-global-land-temperature/regression-predicting-future-global-land-temperature&quot; target=&quot;_blank&quot;&gt;Regression: Predicting the global land temperature of the Earth in 2050 from the past data&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/6-regression&quot;&gt;Homework 6: Regression as an optimization problem&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 14, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 4: visualization]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/4-python-visualization"/>
  <id>http:/DMC2020U/quiz/4-python-visualization</id>
  <published>2020-07-09T00:00:00-05:00</published>
  <updated>2020-07-09T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of visualization techniques and concepts.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Given a plot with a curve in it, how can you visually tell if the Y component of data is exponentially related to the X component of it? How can you tell if the relationship between the X and Y components is power-law? how can you visually tell if the X component of data is exponentially related to the Y component of it?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The exponential relationship can be distinguished by log-transforming only one of the axes and observing a linear behavior in the plot. The power-law behavior can be detected by taking the log of both axes and observing a linear behavior in the plot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the difference between factors and levels?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Factors are categorical data variables that describe qualities. Levels are the categories of data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name at least three different color-scales and describe their usage in visualization.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;sequential color scales&lt;/strong&gt;: used for making plots of continuous data values.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;diverging color scales&lt;/strong&gt;: to make plots of data values that have opposite directions embedded in the meaning of data.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;accent color scales&lt;/strong&gt;: to highlight specific elements in the data.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/4-python-visualization&quot;&gt;Quiz 4: visualization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 09, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 7: Data Visualization]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/7-datavis-io"/>
  <id>http:/DMC2020U/lecture/7-datavis-io</id>
  <published>2020-07-07T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture continues the discussion of Data Visualization techniques and input/output methods,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/visualization/overview/overview.html&quot; target=&quot;_blank&quot;&gt;visualization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/visualization/2d/2d.html&quot; target=&quot;_blank&quot;&gt;visualization 2D&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/visualization/3d/3d.html&quot; target=&quot;_blank&quot;&gt;visualization 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/7-datavis-io&quot;&gt;Lecture 7: Data Visualization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 07, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 5: Data Visualization, IO]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/5-datavis-io"/>
  <id>http:/DMC2020U/homework/5-datavis-io</id>
  <published>2020-07-07T00:00:00-05:00</published>
  <updated>2020-07-07T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday July 15, 2020 10:15 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to read heterogeneous data from the web and visualize it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/reading-data-from-web/reading-data-from-web&quot; target=&quot;_blank&quot;&gt;Reading data from the World Wide Web&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/histogram-different-transformations/histogram-different-transformations&quot; target=&quot;_blank&quot;&gt;The different faces of binned data via different transformations&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/data-transfer-amino-acid/data-transfer-amino-acid&quot; target=&quot;_blank&quot;&gt;Data transfer: Parsing Amino Acid data file&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/5-datavis-io&quot;&gt;Homework 5: Data Visualization, IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 07, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 3: Python programming concepts, data IO]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/3-python-programming"/>
  <id>http:/DMC2020U/quiz/3-python-programming</id>
  <published>2020-07-02T00:00:00-05:00</published>
  <updated>2020-07-02T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python programming. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/3/&lt;/strong&gt; folder in your GitHub project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Consider this &lt;a href=&quot;http:/DMC2020U/quiz/3/outputter.in&quot; target=&quot;_blank&quot;&gt;comma-separated data file&lt;/a&gt;. Write a simple Python code &lt;code&gt;outputter.py&lt;/code&gt; that takes two command line arguments like the following,
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python outputter.py outputter.in outputter.out
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;and then writes the same float data in the output file &lt;code&gt;outputter.out&lt;/code&gt; (whose name and path was taken from the command-line), and writes out data in a formatted style, like this &lt;a href=&quot;http:/DMC2020U/quiz/3/outputter.out&quot; target=&quot;_blank&quot;&gt;example output file&lt;/a&gt;, with only three digits after decimal point.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http:/DMC2020U/quiz/3/solutions/outputter.py&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is an example attempt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Suppose you write a Python module, which you would also like to run it as a standalone Python code. If you wanted to make sure that some specific Python statements are executed only when the code is run a Python code (and not a module), you may recall from the lecture, that we had to use and if block like the following,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
&amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Briefly explain what this if block does and mean.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Each Python module has an attribute &lt;code&gt;__name__&lt;/code&gt;. When the code is used as a Python module, the &lt;code&gt;__name__&lt;/code&gt; is set to the name of the module, otherwise it is set to &lt;code&gt;__main__&lt;/code&gt;. Therefore, this if block makes sure that the code is running as a standalone code or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Suppose you are given two lists of numbers,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;even = [0,2,4,6,8]
odd = [1,3,5,7,9]
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Write a &lt;strong&gt;one-line&lt;/strong&gt; Python statement (list comprehension) that gives a list &lt;code&gt;summ&lt;/code&gt; whose elements are the sum of the respective elements in the above two lists &lt;code&gt;odd&lt;/code&gt; and &lt;code&gt;even&lt;/code&gt;, that is,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;summ
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;[1, 5, 9, 13, 17]  
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;even = [0,2,4,6,8]
odd = [1,3,5,7,9]
summ = [i+j for i,j in zip(odd,even)]
summ
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;[1, 5, 9, 13, 17]  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following for-loop,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This for-loop never ends! Because at each iteration, a new element is added to the end of the list. You can check if this is indeed the case by adding a print statement inside the loop,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
    print(item)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;0  
2  
4  
6  
8  
1  
3  
5  
7  
9  
2  
4  
6  
8  
10  
3  
5  
7  
9  
11  
4  
6  
8  
10  
12  
5  
7  
9  
11  
13  
6  
8  
10  
12  
14  
7  
9  
11   and the loop keeps printing forever!  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/3-python-programming&quot;&gt;Quiz 3: Python programming concepts, data IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on July 02, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 6: Object-Oriented Programming in Python, Data Visualization]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/6-python-programming-oop-datavis"/>
  <id>http:/DMC2020U/lecture/6-python-programming-oop-datavis</id>
  <published>2020-06-30T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture continues the discussion of the Python programming language and introduces the concepts of classes. Data Visualization techniques will be also discussed,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/instantiation/instantiation.html&quot; target=&quot;_blank&quot;&gt;OOP - instantiation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/encapsulation/encapsulation.html&quot; target=&quot;_blank&quot;&gt;OOP - encapsulation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://serialmentor.com/dataviz/&quot; target=&quot;_blank&quot;&gt;Data Visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/6-python-programming-oop-datavis&quot;&gt;Lecture 6: Object-Oriented Programming in Python, Data Visualization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 30, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 4: Object-Oriented Programming, Data Visualization]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/4-class-datavis"/>
  <id>http:/DMC2020U/homework/4-class-datavis</id>
  <published>2020-06-30T00:00:00-05:00</published>
  <updated>2020-06-30T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday July 8, 2020 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to program OOP-style, as well as some data visualization tips.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/oop-integration-simpson/oop-integration-simpson&quot; target=&quot;_blank&quot;&gt;Implementing an integration problem via an integrand object&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/coordinates-transformation/coordinates-transformation&quot; target=&quot;_blank&quot;&gt;Coordinate transformation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/4-class-datavis&quot;&gt;Homework 4: Object-Oriented Programming, Data Visualization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 30, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Python programming concepts]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/2-python-programming"/>
  <id>http:/DMC2020U/quiz/2-python-programming</id>
  <published>2020-06-25T00:00:00-05:00</published>
  <updated>2020-06-25T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python programming. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/2/&lt;/strong&gt; folder in your GitHub project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three fundamental components of a Turing-complete language?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;a way for accessing the memory&lt;/li&gt;
      &lt;li&gt;a way for iteration&lt;/li&gt;
      &lt;li&gt;a way for branching&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three common types of errors in computer programs?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;syntax errors&lt;/li&gt;
      &lt;li&gt;runtime errors&lt;/li&gt;
      &lt;li&gt;semantic errors&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Suppose you write a program that has memory leak. What type of programming error you dealing with?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; runtime error&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the biggest integer (in base 10) that you could store in an &lt;code&gt;int32&lt;/code&gt; type?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; 2,147,483,647&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the difference between &lt;code&gt;int16&lt;/code&gt; and the (&lt;em&gt;unsigned&lt;/em&gt;) &lt;code&gt;uint64&lt;/code&gt; types (two major differences is enough)?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1) &lt;code&gt;int16&lt;/code&gt; is only 16 bits storage, whereas &lt;code&gt;uint64&lt;/code&gt; is 64 bits storage.&lt;br /&gt;
2) &lt;code&gt;int16&lt;/code&gt; is a signed integer storage meaning that one bit is reserved for the integer’s sign representation, whereas &lt;code&gt;uint64&lt;/code&gt; can only represent positive integers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following for-loop,&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This for-loop never ends! Because at each iteration, a new element is added to the end of the list. You can check if this is indeed the case by adding a print statement inside the loop,&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
    print(item)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;0
2
4
6
8
1
3
5
7
9
2
4
6
8
10
3
5
7
9
11
4
6
8
10
12
5
7
9
11
13
6
8
10
12
14
7
9
11
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;and the loop keeps printing forever!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that prints your full name 5 times, each on a separate line.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('Data Mining\n'*5)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;Data Mining
Data Mining
Data Mining
Data Mining
Data Mining
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that applies the relevant Python string manipulator methods to this string,&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Python Is Great For String Manipulation.
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;and transforms it to the following string and and prints it on screen,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.noitalupinaMgnirtSroFtaerGsInohtyP
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( &quot;Python Is Great For String Manipulation.&quot;.replace(' ','')[::-1] )
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;.noitalupinaMgnirtSroFtaerGsInohtyP
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Make a string from the following list, with one one-line of Python code.&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = ['The' , 'weather' , 'is' , 'rainy' , 'today' , 'and' , 'cold' , 'only' , '22' , 'F.']
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot; &quot;.join(mylist)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;'The weather is rainy today and cold only 22 F.'
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are tuples mutable objects? Can they be redefined?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
No. Yes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do you define an empty dictionary?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;empty_dict = {} 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/2-python-programming&quot;&gt;Quiz 2: Python programming concepts&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 25, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 5: The structure of the Python programming language: classes, modules, exception handling, and input/output methods]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/5-python-programming-modules-classes-io-Copy"/>
  <id>http:/DMC2020U/lecture/5-python-programming-modules-classes-io - Copy</id>
  <published>2020-06-25T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture continues the discussion of the Python programming language and introduces the concepts of classes, modules, exception handling, and input/output methods in Python. This is last lecture that mainly focused on Python concepts. In the following lectures, our focus will gradually shift from pure-Python to Data Mining with Python. The relevant Python lecture notes are the following,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/program-units/modules/modules.html&quot; target=&quot;_blank&quot;&gt;modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/data-transfer/input/input.html&quot; target=&quot;_blank&quot;&gt;input&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/data-transfer/output/output.html&quot; target=&quot;_blank&quot;&gt;output&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/exceptions-errors/exception-handling/exception-handling.html&quot; target=&quot;_blank&quot;&gt;exception handling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/instantiation/instantiation.html&quot; target=&quot;_blank&quot;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/5-python-programming-modules-classes-io-Copy&quot;&gt;Lecture 5: The structure of the Python programming language: classes, modules, exception handling, and input/output methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 25, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 4: The structure of the Python programming language: functions]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/4-python-programming-function"/>
  <id>http:/DMC2020U/lecture/4-python-programming-function</id>
  <published>2020-06-23T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture continues the discussion of the Python programming language and introduces the concept of functions in Python. The relevant Python lecture notes are the following,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/program-units/functions/functions.html&quot; target=&quot;_blank&quot;&gt;functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/4-python-programming-function&quot;&gt;Lecture 4: The structure of the Python programming language: functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 23, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: Python programming: Branching, functions, exception handling]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/3-python-programming"/>
  <id>http:/DMC2020U/homework/3-python-programming</id>
  <published>2020-06-23T00:00:00-05:00</published>
  <updated>2020-06-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Tuesday June 30, 2020 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to work with the Python programming language constructs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/branching-pythonic-way/branching-pythonic-way&quot; target=&quot;_blank&quot;&gt;Branching, the Pythonic way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/implementing-gaussian-function/implementing-gaussian-function&quot; target=&quot;_blank&quot;&gt;Implementing the Bell-shaped (Gaussian) function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/one-line-check-even-number/one-line-check-even-number&quot; target=&quot;_blank&quot;&gt;Check if number is even in one line function definition&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/largest-prime-number-smaller-than-input/largest-prime-number-smaller-than-input&quot; target=&quot;_blank&quot;&gt;Getting the largest prime number smaller than the input value&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/finding-maximum-value-via-recursive-function/finding-maximum-value-via-recursive-function&quot; target=&quot;_blank&quot;&gt;Finding the maximum value of an array via recursive function calls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/exception-handling-projectile-motion/exception-handling-projectile-motion&quot; target=&quot;_blank&quot;&gt;Exception handling in the case of a simple projectile motion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/command-line-input-arguments-summation/command-line-input-arguments-summation&quot; target=&quot;_blank&quot;&gt;Command line input arguments summation via sum()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/command-line-input-arguments-eval/command-line-input-arguments-eval&quot; target=&quot;_blank&quot;&gt;Command line input arguments summation via eval()&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/3-python-programming&quot;&gt;Homework 3: Python programming: Branching, functions, exception handling&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 23, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Version control system, programming history]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/quiz/1-version-control-system-programming-history"/>
  <id>http:/DMC2020U/quiz/1-version-control-system-programming-history</id>
  <published>2020-06-18T00:00:00-05:00</published>
  <updated>2020-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DMC2020U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Version Control System and the history of programming. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/1/&lt;/strong&gt; folder in your GitHub project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
 &lt;br /&gt;
 (A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
 (B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
 (C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
 (D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
 (E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
 (F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
 (G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
 (H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
 (I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
 (J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer: A, D, G, F, I&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
 &lt;br /&gt;
 (A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
 (B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
 (C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer: B, C&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write down the Git command that lists all Git commands for you.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; $ git help -a
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;/p&gt;

    &lt;p&gt;(B) Does it need interpretation in order to become machine-comprehensible?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Yes. An &lt;em&gt;Assembler&lt;/em&gt; interprets the program for the machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name the oldest high-level programming language that is still in active daily use.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;/p&gt;

    &lt;p&gt;(B) Approximately how many decades is it old? ($\pm15$ years is acceptable answer. the decade it was created is also an acceptable answer)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
in 1950s&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name a second-generation programming language.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;/p&gt;

    &lt;p&gt;(B) Which language-generation are Fortran, C, C++, MATLAB, Python, R?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
third, third, third, fourth, fourth, fourth&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In what decades C, C++, and MATLAB/Python were created, respectively?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1970s, 1980s, 1980s, 1990s&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name an ancestor programming language of C.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
B&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of C++.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
C, Simula&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of MATLAB and a programming language ancestor of Python.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran/C&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/quiz/1-version-control-system-programming-history&quot;&gt;Quiz 1: Version control system, programming history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 18, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 3: The structure of the Python programming language]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/3-python-programming-structure"/>
  <id>http:/DMC2020U/lecture/3-python-programming-structure</id>
  <published>2020-06-18T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture aims at providing an overview of the structure of and the coding practices within the Python programming language.&lt;/p&gt;

&lt;p&gt;Throughout this and the following lecture, we will provide a quick overview of the Python programming language syntax, with an emphasis on the tools and commands needed for Data Mining. We will follow the lecture available &lt;a href=&quot;https://www.cdslab.org/python/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and starting from &lt;a href=&quot;https://www.cdslab.org/python/notes/values-variables-types/first-program/first-program.html&quot; target=&quot;_blank&quot;&gt;variables in Python&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/3-python-programming-structure&quot;&gt;Lecture 3: The structure of the Python programming language&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 18, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 2: The Python programming language]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/lecture/2-python-programming-introduction"/>
  <id>http:/DMC2020U/lecture/2-python-programming-introduction</id>
  <published>2020-06-16T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture aims at providing an overview of the history of programming and the Python programming language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/programming-history/programming-history.html&quot; target=&quot;_blank&quot;&gt;Programming history&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/computer-program-structure/computer-program-structure.html&quot; target=&quot;_blank&quot;&gt;Computer program structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/python-for-beginners/python-for-beginners.html&quot; target=&quot;_blank&quot;&gt;Beginning Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/lecture/2-python-programming-introduction&quot;&gt;Lecture 2: The Python programming language&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 16, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Python programming]]></title>
  <link rel="alternate" type="text/html" href="http:/DMC2020U/homework/2-python-programming"/>
  <id>http:/DMC2020U/homework/2-python-programming</id>
  <published>2020-06-16T00:00:00-05:00</published>
  <updated>2020-06-16T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DMC2020U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;♣ &lt;strong&gt;Due Date: Tuesday June 23, 2020 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to work with the Python programming language constructs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/integer-overflow/integer-overflow&quot; target=&quot;_blank&quot;&gt;Integer overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/python-variable-aliasing-copying/python-variable-aliasing-copying&quot; target=&quot;_blank&quot;&gt;Variable aliasing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/while-loop-to-for-loop/while-loop-to-for-loop&quot; target=&quot;_blank&quot;&gt;The while-loop implementation of for-loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/precision-error-paradox/precision-error-paradox&quot; target=&quot;_blank&quot;&gt;Impact of machine precision on numerical computation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/roundoff-error-paradox/roundoff-error-paradox&quot; target=&quot;_blank&quot;&gt;Impact of round-off errors on numerical computations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DMC2020U/homework/2-python-programming&quot;&gt;Homework 2: Python programming&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DMC2020U&quot;&gt;DATA 3401 - Summer 2020 - TTH 10:30-12:20 - Microsoft Teams Virtual Room&lt;/a&gt; on June 16, 2020.&lt;/p&gt;</content>
</entry>

</feed>
